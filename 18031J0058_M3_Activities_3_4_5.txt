Activity -3

Give the tilde (~) approximations for the following expressions:
1.	a. N + 1    ~   N

2.	b. 1 + 1 / N    ~  1

3.	c. (1 + 1 / N) (1 + 2 / N)    ~   1

4.	d. 2N3 - 15N2 + N      ~   N^3

5.	e. lg(2N) / lg(N)   ~ 1

6.	f. lg(N2 + 1) / lg(N) ~ 2

s


Activity - 4

Code-1:    
          int count = 0;
            for(int i = 0; i < N; i++){    
                count++;
            }                                       =    N
           


Code-2:         
             int sum = 0;
            if(sum == 0){
                sum++;
}                                                   =    1


Code-3:           
                  for(int i = N; i > 0; i < N/2){
            int sum = 0; 
}                                                   =   Error! If i<i/2 and  N=8 then N/4     





Code-4:           
                for(int i = 0; i < N; i++){
                for(int j = 0; j < N; j++){
                    System.out.println(“Hello”);
                }
            }                                       =  N^2
        


Code-5:   
                for(int i = 0; i < N; i++){
                for(int j = 0; j < N; j = j * 2){
                    System.out.println(“Hello”);
                }
            }                                       = Loop runs infinte times and if J=1 then "N log N"
          



Code-6:     public int fibonacci(int number) {
if (number <= 1) {
                     return number;
                } else {
                         return fibonacci(number - 1) + fibonacci(number - 2);
                }
}                                                  =  1



Activity -5

Code-1:     int sum = 0;
        for (int n = N; n > 0; n /= 2)
            for(int i = 0; i < n; i++)
                Sum++;                 
                                            =>   growth is N

        


Code-2:    int sum = 0;
        for (int i = 1 i < N; i *= 2)
            for (int j = 0; j < i; j++)
                sum++;
                                           => growth is 2N

     

Code-3:    int sum = 0;
        for (int i = 1 i < N; i *= 2)
            for (int j = 0; j < N; j++)
                Sum++;
                                            =>  NlogN

